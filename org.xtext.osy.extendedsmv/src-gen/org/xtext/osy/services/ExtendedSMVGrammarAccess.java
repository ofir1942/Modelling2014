/*
* generated by Xtext
*/
package org.xtext.osy.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExtendedSMVGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cSectionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSectionsSectionParserRuleCall_0 = (RuleCall)cSectionsAssignment.eContents().get(0);
		
		//Model:
		//	sections+=Section*;
		public ParserRule getRule() { return rule; }

		//sections+=Section*
		public Assignment getSectionsAssignment() { return cSectionsAssignment; }

		//Section
		public RuleCall getSectionsSectionParserRuleCall_0() { return cSectionsSectionParserRuleCall_0; }
	}

	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Section");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariablesSectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransactionsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Section:
		//	VariablesSection | Assignments | //| Comments
		//	Transactions;
		public ParserRule getRule() { return rule; }

		//VariablesSection | Assignments | //| Comments
		//Transactions
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariablesSection
		public RuleCall getVariablesSectionParserRuleCall_0() { return cVariablesSectionParserRuleCall_0; }

		//Assignments
		public RuleCall getAssignmentsParserRuleCall_1() { return cAssignmentsParserRuleCall_1; }

		////| Comments
		//Transactions
		public RuleCall getTransactionsParserRuleCall_2() { return cTransactionsParserRuleCall_2; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentSMV_COMMENTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		//Comment:
		//	comment=SMV_COMMENT;
		public ParserRule getRule() { return rule; }

		//comment=SMV_COMMENT
		public Assignment getCommentAssignment() { return cCommentAssignment; }

		//SMV_COMMENT
		public RuleCall getCommentSMV_COMMENTTerminalRuleCall_0() { return cCommentSMV_COMMENTTerminalRuleCall_0; }
	}

	public class VariablesSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariablesSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		
		//VariablesSection:
		//	"VAR" variables+=VariableDeclaration+;
		public ParserRule getRule() { return rule; }

		//"VAR" variables+=VariableDeclaration+
		public Group getGroup() { return cGroup; }

		//"VAR"
		public Keyword getVARKeyword_0() { return cVARKeyword_0; }

		//variables+=VariableDeclaration+
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }
	}

	public class AssignmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cASSIGNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentsAssignmentExpressionParserRuleCall_2_0 = (RuleCall)cAssignmentsAssignment_2.eContents().get(0);
		
		//Assignments:
		//	{Assignments} "ASSIGN" assignments+=AssignmentExpression+;
		public ParserRule getRule() { return rule; }

		//{Assignments} "ASSIGN" assignments+=AssignmentExpression+
		public Group getGroup() { return cGroup; }

		//{Assignments}
		public Action getAssignmentsAction_0() { return cAssignmentsAction_0; }

		//"ASSIGN"
		public Keyword getASSIGNKeyword_1() { return cASSIGNKeyword_1; }

		//assignments+=AssignmentExpression+
		public Assignment getAssignmentsAssignment_2() { return cAssignmentsAssignment_2; }

		//AssignmentExpression
		public RuleCall getAssignmentsAssignmentExpressionParserRuleCall_2_0() { return cAssignmentsAssignmentExpressionParserRuleCall_2_0; }
	}

	public class TransactionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transactions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRANSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransactionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransactionTransactionStatementParserRuleCall_1_0 = (RuleCall)cTransactionAssignment_1.eContents().get(0);
		
		//Transactions:
		//	"TRANS" transaction+=TransactionStatement+;
		public ParserRule getRule() { return rule; }

		//"TRANS" transaction+=TransactionStatement+
		public Group getGroup() { return cGroup; }

		//"TRANS"
		public Keyword getTRANSKeyword_0() { return cTRANSKeyword_0; }

		//transaction+=TransactionStatement+
		public Assignment getTransactionAssignment_1() { return cTransactionAssignment_1; }

		//TransactionStatement
		public RuleCall getTransactionTransactionStatementParserRuleCall_1_0() { return cTransactionTransactionStatementParserRuleCall_1_0; }
	}

	public class TransactionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransactionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPreconditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPreconditionTransactionPreconditionParserRuleCall_0_0 = (RuleCall)cPreconditionAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPostTransactionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPostTransactionPostTransactionParserRuleCall_2_0 = (RuleCall)cPostTransactionAssignment_2.eContents().get(0);
		
		//TransactionStatement:
		//	precondition=TransactionPrecondition "->" postTransaction=PostTransaction;
		public ParserRule getRule() { return rule; }

		//precondition=TransactionPrecondition "->" postTransaction=PostTransaction
		public Group getGroup() { return cGroup; }

		//precondition=TransactionPrecondition
		public Assignment getPreconditionAssignment_0() { return cPreconditionAssignment_0; }

		//TransactionPrecondition
		public RuleCall getPreconditionTransactionPreconditionParserRuleCall_0_0() { return cPreconditionTransactionPreconditionParserRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//postTransaction=PostTransaction
		public Assignment getPostTransactionAssignment_2() { return cPostTransactionAssignment_2; }

		//PostTransaction
		public RuleCall getPostTransactionPostTransactionParserRuleCall_2_0() { return cPostTransactionPostTransactionParserRuleCall_2_0; }
	}

	public class TransactionPreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransactionPrecondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPreconditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPreconditionsPreconditionStatementParserRuleCall_0_0 = (RuleCall)cPreconditionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLogicalOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalOperatorAND_ORTerminalRuleCall_1_0_0 = (RuleCall)cLogicalOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cPreconditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPreconditionsPreconditionStatementParserRuleCall_1_1_0 = (RuleCall)cPreconditionsAssignment_1_1.eContents().get(0);
		
		//TransactionPrecondition:
		//	preconditions+=PreconditionStatement (logicalOperator+=AND_OR preconditions+=PreconditionStatement)*;
		public ParserRule getRule() { return rule; }

		//preconditions+=PreconditionStatement (logicalOperator+=AND_OR preconditions+=PreconditionStatement)*
		public Group getGroup() { return cGroup; }

		//preconditions+=PreconditionStatement
		public Assignment getPreconditionsAssignment_0() { return cPreconditionsAssignment_0; }

		//PreconditionStatement
		public RuleCall getPreconditionsPreconditionStatementParserRuleCall_0_0() { return cPreconditionsPreconditionStatementParserRuleCall_0_0; }

		//(logicalOperator+=AND_OR preconditions+=PreconditionStatement)*
		public Group getGroup_1() { return cGroup_1; }

		//logicalOperator+=AND_OR
		public Assignment getLogicalOperatorAssignment_1_0() { return cLogicalOperatorAssignment_1_0; }

		//AND_OR
		public RuleCall getLogicalOperatorAND_ORTerminalRuleCall_1_0_0() { return cLogicalOperatorAND_ORTerminalRuleCall_1_0_0; }

		//preconditions+=PreconditionStatement
		public Assignment getPreconditionsAssignment_1_1() { return cPreconditionsAssignment_1_1; }

		//PreconditionStatement
		public RuleCall getPreconditionsPreconditionStatementParserRuleCall_1_1_0() { return cPreconditionsPreconditionStatementParserRuleCall_1_1_0; }
	}

	public class PreconditionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreconditionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerPreconditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanPreconditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatePreconditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PreconditionStatement:
		//	IntegerPrecondition | BooleanPrecondition | StatePrecondition | Comment;
		public ParserRule getRule() { return rule; }

		//IntegerPrecondition | BooleanPrecondition | StatePrecondition | Comment
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerPrecondition
		public RuleCall getIntegerPreconditionParserRuleCall_0() { return cIntegerPreconditionParserRuleCall_0; }

		//BooleanPrecondition
		public RuleCall getBooleanPreconditionParserRuleCall_1() { return cBooleanPreconditionParserRuleCall_1; }

		//StatePrecondition
		public RuleCall getStatePreconditionParserRuleCall_2() { return cStatePreconditionParserRuleCall_2; }

		//Comment
		public RuleCall getCommentParserRuleCall_3() { return cCommentParserRuleCall_3; }
	}

	public class StatePreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatePrecondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarStateVariableDeclarationCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarStateVariableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVarStateVariableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StatePrecondition:
		//	var=[StateVariableDeclaration] "=" value=ID;
		public ParserRule getRule() { return rule; }

		//var=[StateVariableDeclaration] "=" value=ID
		public Group getGroup() { return cGroup; }

		//var=[StateVariableDeclaration]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//[StateVariableDeclaration]
		public CrossReference getVarStateVariableDeclarationCrossReference_0_0() { return cVarStateVariableDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getVarStateVariableDeclarationIDTerminalRuleCall_0_0_1() { return cVarStateVariableDeclarationIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }
	}

	public class BooleanPreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanPrecondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarBooleanDeclarionCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarBooleanDeclarionIDTerminalRuleCall_0_0_1 = (RuleCall)cVarBooleanDeclarionCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBOOLParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BooleanPrecondition:
		//	var=[BooleanDeclarion] "=" value=BOOL;
		public ParserRule getRule() { return rule; }

		//var=[BooleanDeclarion] "=" value=BOOL
		public Group getGroup() { return cGroup; }

		//var=[BooleanDeclarion]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//[BooleanDeclarion]
		public CrossReference getVarBooleanDeclarionCrossReference_0_0() { return cVarBooleanDeclarionCrossReference_0_0; }

		//ID
		public RuleCall getVarBooleanDeclarionIDTerminalRuleCall_0_0_1() { return cVarBooleanDeclarionIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=BOOL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_2_0() { return cValueBOOLParserRuleCall_2_0; }
	}

	public class IntegerPreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerPrecondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarIntegerDeclarionCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarIntegerDeclarionIDTerminalRuleCall_0_0_1 = (RuleCall)cVarIntegerDeclarionCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IntegerPrecondition:
		//	var=[IntegerDeclarion] "=" value=INT;
		public ParserRule getRule() { return rule; }

		//var=[IntegerDeclarion] "=" value=INT
		public Group getGroup() { return cGroup; }

		//var=[IntegerDeclarion]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//[IntegerDeclarion]
		public CrossReference getVarIntegerDeclarionCrossReference_0_0() { return cVarIntegerDeclarionCrossReference_0_0; }

		//ID
		public RuleCall getVarIntegerDeclarionIDTerminalRuleCall_0_0_1() { return cVarIntegerDeclarionIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class PostTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostTransaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPostTransactionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPostTransactionsPostTransactionStatementParserRuleCall_0_0 = (RuleCall)cPostTransactionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLogicalOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalOperatorAND_ORTerminalRuleCall_1_0_0 = (RuleCall)cLogicalOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cPostTransactionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPostTransactionsPostTransactionStatementParserRuleCall_1_1_0 = (RuleCall)cPostTransactionsAssignment_1_1.eContents().get(0);
		
		//PostTransaction:
		//	postTransactions+=PostTransactionStatement (logicalOperator+=AND_OR postTransactions+=PostTransactionStatement)*;
		public ParserRule getRule() { return rule; }

		//postTransactions+=PostTransactionStatement (logicalOperator+=AND_OR postTransactions+=PostTransactionStatement)*
		public Group getGroup() { return cGroup; }

		//postTransactions+=PostTransactionStatement
		public Assignment getPostTransactionsAssignment_0() { return cPostTransactionsAssignment_0; }

		//PostTransactionStatement
		public RuleCall getPostTransactionsPostTransactionStatementParserRuleCall_0_0() { return cPostTransactionsPostTransactionStatementParserRuleCall_0_0; }

		//(logicalOperator+=AND_OR postTransactions+=PostTransactionStatement)*
		public Group getGroup_1() { return cGroup_1; }

		//logicalOperator+=AND_OR
		public Assignment getLogicalOperatorAssignment_1_0() { return cLogicalOperatorAssignment_1_0; }

		//AND_OR
		public RuleCall getLogicalOperatorAND_ORTerminalRuleCall_1_0_0() { return cLogicalOperatorAND_ORTerminalRuleCall_1_0_0; }

		//postTransactions+=PostTransactionStatement
		public Assignment getPostTransactionsAssignment_1_1() { return cPostTransactionsAssignment_1_1; }

		//PostTransactionStatement
		public RuleCall getPostTransactionsPostTransactionStatementParserRuleCall_1_1_0() { return cPostTransactionsPostTransactionStatementParserRuleCall_1_1_0; }
	}

	public class PostTransactionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostTransactionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalPostTRansactionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimplePostTransactionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PostTransactionStatement:
		//	ConditionalPostTRansaction | //| Comment
		// SimplePostTransaction;
		public ParserRule getRule() { return rule; }

		//ConditionalPostTRansaction | //| Comment
		// SimplePostTransaction
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConditionalPostTRansaction
		public RuleCall getConditionalPostTRansactionParserRuleCall_0() { return cConditionalPostTRansactionParserRuleCall_0; }

		////| Comment
		// SimplePostTransaction
		public RuleCall getSimplePostTransactionParserRuleCall_1() { return cSimplePostTransactionParserRuleCall_1; }
	}

	public class SimplePostTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimplePostTransaction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerPostTransactionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanPostTransactionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatePostTransactionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimplePostTransaction:
		//	IntegerPostTransaction | BooleanPostTransaction | //| Comment 
		// StatePostTransaction;
		public ParserRule getRule() { return rule; }

		//IntegerPostTransaction | BooleanPostTransaction | //| Comment 
		// StatePostTransaction
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerPostTransaction
		public RuleCall getIntegerPostTransactionParserRuleCall_0() { return cIntegerPostTransactionParserRuleCall_0; }

		//BooleanPostTransaction
		public RuleCall getBooleanPostTransactionParserRuleCall_1() { return cBooleanPostTransactionParserRuleCall_1; }

		////| Comment 
		// StatePostTransaction
		public RuleCall getStatePostTransactionParserRuleCall_2() { return cStatePostTransactionParserRuleCall_2; }
	}

	public class StatePostTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatePostTransaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarStateVariableDeclarationCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarStateVariableDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVarStateVariableDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueIDTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//StatePostTransaction:
		//	"next" "(" var=[StateVariableDeclaration] ")" "=" value=ID;
		public ParserRule getRule() { return rule; }

		//"next" "(" var=[StateVariableDeclaration] ")" "=" value=ID
		public Group getGroup() { return cGroup; }

		//"next"
		public Keyword getNextKeyword_0() { return cNextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[StateVariableDeclaration]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[StateVariableDeclaration]
		public CrossReference getVarStateVariableDeclarationCrossReference_2_0() { return cVarStateVariableDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getVarStateVariableDeclarationIDTerminalRuleCall_2_0_1() { return cVarStateVariableDeclarationIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=ID
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_5_0() { return cValueIDTerminalRuleCall_5_0; }
	}

	public class BooleanPostTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanPostTransaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarBooleanDeclarionCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarBooleanDeclarionIDTerminalRuleCall_2_0_1 = (RuleCall)cVarBooleanDeclarionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueBOOLParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//BooleanPostTransaction:
		//	"next" "(" var=[BooleanDeclarion] ")" "=" value=BOOL;
		public ParserRule getRule() { return rule; }

		//"next" "(" var=[BooleanDeclarion] ")" "=" value=BOOL
		public Group getGroup() { return cGroup; }

		//"next"
		public Keyword getNextKeyword_0() { return cNextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[BooleanDeclarion]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[BooleanDeclarion]
		public CrossReference getVarBooleanDeclarionCrossReference_2_0() { return cVarBooleanDeclarionCrossReference_2_0; }

		//ID
		public RuleCall getVarBooleanDeclarionIDTerminalRuleCall_2_0_1() { return cVarBooleanDeclarionIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=BOOL
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_5_0() { return cValueBOOLParserRuleCall_5_0; }
	}

	public class IntegerPostTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerPostTransaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarIntegerDeclarionCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarIntegerDeclarionIDTerminalRuleCall_2_0_1 = (RuleCall)cVarIntegerDeclarionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueINTTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//IntegerPostTransaction:
		//	"next" "(" var=[IntegerDeclarion] ")" "=" value=INT;
		public ParserRule getRule() { return rule; }

		//"next" "(" var=[IntegerDeclarion] ")" "=" value=INT
		public Group getGroup() { return cGroup; }

		//"next"
		public Keyword getNextKeyword_0() { return cNextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[IntegerDeclarion]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[IntegerDeclarion]
		public CrossReference getVarIntegerDeclarionCrossReference_2_0() { return cVarIntegerDeclarionCrossReference_2_0; }

		//ID
		public RuleCall getVarIntegerDeclarionIDTerminalRuleCall_2_0_1() { return cVarIntegerDeclarionIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=INT
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0() { return cValueINTTerminalRuleCall_5_0; }
	}

	public class ConditionalPostTRansactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalPostTRansaction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ConditionalPostTRansaction:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerDeclarionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanDeclarionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStateVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//VariableDeclaration:
		//	IntegerDeclarion | BooleanDeclarion | StateVariableDeclaration | Comment;
		public ParserRule getRule() { return rule; }

		//IntegerDeclarion | BooleanDeclarion | StateVariableDeclaration | Comment
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerDeclarion
		public RuleCall getIntegerDeclarionParserRuleCall_0() { return cIntegerDeclarionParserRuleCall_0; }

		//BooleanDeclarion
		public RuleCall getBooleanDeclarionParserRuleCall_1() { return cBooleanDeclarionParserRuleCall_1; }

		//StateVariableDeclaration
		public RuleCall getStateVariableDeclarationParserRuleCall_2() { return cStateVariableDeclarationParserRuleCall_2; }

		//Comment
		public RuleCall getCommentParserRuleCall_3() { return cCommentParserRuleCall_3; }
	}

	public class IntegerDeclarionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerDeclarion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIntegerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IntegerDeclarion:
		//	name=ID ":" "integer" ";";
		public ParserRule getRule() { return rule; }

		//name=ID ":" "integer" ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"integer"
		public Keyword getIntegerKeyword_2() { return cIntegerKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class BooleanDeclarionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanDeclarion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BooleanDeclarion:
		//	name=ID ":" "boolean" ";";
		public ParserRule getRule() { return rule; }

		//name=ID ":" "boolean" ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"boolean"
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class StateVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesIDTerminalRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStatesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatesIDTerminalRuleCall_4_1_0 = (RuleCall)cStatesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StateVariableDeclaration:
		//	name=ID ":" "{" states+=ID ("," states+=ID)* "}" ";";
		public ParserRule getRule() { return rule; }

		//name=ID ":" "{" states+=ID ("," states+=ID)* "}" ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//states+=ID
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//ID
		public RuleCall getStatesIDTerminalRuleCall_3_0() { return cStatesIDTerminalRuleCall_3_0; }

		//("," states+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//states+=ID
		public Assignment getStatesAssignment_4_1() { return cStatesAssignment_4_1; }

		//ID
		public RuleCall getStatesIDTerminalRuleCall_4_1_0() { return cStatesIDTerminalRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStateAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////VarType: 
		// //	'boolean' | 'integer'
		// //;
		//AssignmentExpression:
		//	IntegerAssignment | BooleanAssignment | StateAssignment | Comment;
		public ParserRule getRule() { return rule; }

		//IntegerAssignment | BooleanAssignment | StateAssignment | Comment
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerAssignment
		public RuleCall getIntegerAssignmentParserRuleCall_0() { return cIntegerAssignmentParserRuleCall_0; }

		//BooleanAssignment
		public RuleCall getBooleanAssignmentParserRuleCall_1() { return cBooleanAssignmentParserRuleCall_1; }

		//StateAssignment
		public RuleCall getStateAssignmentParserRuleCall_2() { return cStateAssignmentParserRuleCall_2; }

		//Comment
		public RuleCall getCommentParserRuleCall_3() { return cCommentParserRuleCall_3; }
	}

	public class BooleanAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarBooleanDeclarionCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarBooleanDeclarionIDTerminalRuleCall_2_0_1 = (RuleCall)cVarBooleanDeclarionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueBOOLParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BooleanAssignment:
		//	"init" "(" var=[BooleanDeclarion] ")" ":=" value=BOOL ";";
		public ParserRule getRule() { return rule; }

		//"init" "(" var=[BooleanDeclarion] ")" ":=" value=BOOL ";"
		public Group getGroup() { return cGroup; }

		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[BooleanDeclarion]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[BooleanDeclarion]
		public CrossReference getVarBooleanDeclarionCrossReference_2_0() { return cVarBooleanDeclarionCrossReference_2_0; }

		//ID
		public RuleCall getVarBooleanDeclarionIDTerminalRuleCall_2_0_1() { return cVarBooleanDeclarionIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//value=BOOL
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_5_0() { return cValueBOOLParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL:
		//	"True" | "False";
		public ParserRule getRule() { return rule; }

		//"True" | "False"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"True"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"False"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class IntegerAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarIntegerDeclarionCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarIntegerDeclarionIDTerminalRuleCall_2_0_1 = (RuleCall)cVarIntegerDeclarionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueINTTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IntegerAssignment:
		//	"init" "(" var=[IntegerDeclarion] ")" ":=" value=INT ";";
		public ParserRule getRule() { return rule; }

		//"init" "(" var=[IntegerDeclarion] ")" ":=" value=INT ";"
		public Group getGroup() { return cGroup; }

		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[IntegerDeclarion]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[IntegerDeclarion]
		public CrossReference getVarIntegerDeclarionCrossReference_2_0() { return cVarIntegerDeclarionCrossReference_2_0; }

		//ID
		public RuleCall getVarIntegerDeclarionIDTerminalRuleCall_2_0_1() { return cVarIntegerDeclarionIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//value=INT
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0() { return cValueINTTerminalRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class StateAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarStateVariableDeclarationCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarStateVariableDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVarStateVariableDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueIDTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////
		//StateAssignment:
		//	"init" "(" var=[StateVariableDeclaration] ")" ":=" value=ID ";";
		public ParserRule getRule() { return rule; }

		//"init" "(" var=[StateVariableDeclaration] ")" ":=" value=ID ";"
		public Group getGroup() { return cGroup; }

		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[StateVariableDeclaration]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[StateVariableDeclaration]
		public CrossReference getVarStateVariableDeclarationCrossReference_2_0() { return cVarStateVariableDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getVarStateVariableDeclarationIDTerminalRuleCall_2_0_1() { return cVarStateVariableDeclarationIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//value=ID
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_5_0() { return cValueIDTerminalRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	
	
	private ModelElements pModel;
	private SectionElements pSection;
	private CommentElements pComment;
	private TerminalRule tSMV_COMMENT;
	private TerminalRule tAND_OR;
	private VariablesSectionElements pVariablesSection;
	private AssignmentsElements pAssignments;
	private TransactionsElements pTransactions;
	private TransactionStatementElements pTransactionStatement;
	private TransactionPreconditionElements pTransactionPrecondition;
	private PreconditionStatementElements pPreconditionStatement;
	private StatePreconditionElements pStatePrecondition;
	private BooleanPreconditionElements pBooleanPrecondition;
	private IntegerPreconditionElements pIntegerPrecondition;
	private PostTransactionElements pPostTransaction;
	private PostTransactionStatementElements pPostTransactionStatement;
	private SimplePostTransactionElements pSimplePostTransaction;
	private StatePostTransactionElements pStatePostTransaction;
	private BooleanPostTransactionElements pBooleanPostTransaction;
	private IntegerPostTransactionElements pIntegerPostTransaction;
	private ConditionalPostTRansactionElements pConditionalPostTRansaction;
	private VariableDeclarationElements pVariableDeclaration;
	private IntegerDeclarionElements pIntegerDeclarion;
	private BooleanDeclarionElements pBooleanDeclarion;
	private StateVariableDeclarationElements pStateVariableDeclaration;
	private AssignmentExpressionElements pAssignmentExpression;
	private BooleanAssignmentElements pBooleanAssignment;
	private BOOLElements pBOOL;
	private IntegerAssignmentElements pIntegerAssignment;
	private StateAssignmentElements pStateAssignment;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExtendedSMVGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.osy.ExtendedSMV".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	sections+=Section*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Section:
	//	VariablesSection | Assignments | //| Comments
	//	Transactions;
	public SectionElements getSectionAccess() {
		return (pSection != null) ? pSection : (pSection = new SectionElements());
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}

	//Comment:
	//	comment=SMV_COMMENT;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//terminal SMV_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSMV_COMMENTRule() {
		return (tSMV_COMMENT != null) ? tSMV_COMMENT : (tSMV_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMV_COMMENT"));
	} 

	//terminal AND_OR:
	//	"&" | "|";
	public TerminalRule getAND_ORRule() {
		return (tAND_OR != null) ? tAND_OR : (tAND_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND_OR"));
	} 

	//VariablesSection:
	//	"VAR" variables+=VariableDeclaration+;
	public VariablesSectionElements getVariablesSectionAccess() {
		return (pVariablesSection != null) ? pVariablesSection : (pVariablesSection = new VariablesSectionElements());
	}
	
	public ParserRule getVariablesSectionRule() {
		return getVariablesSectionAccess().getRule();
	}

	//Assignments:
	//	{Assignments} "ASSIGN" assignments+=AssignmentExpression+;
	public AssignmentsElements getAssignmentsAccess() {
		return (pAssignments != null) ? pAssignments : (pAssignments = new AssignmentsElements());
	}
	
	public ParserRule getAssignmentsRule() {
		return getAssignmentsAccess().getRule();
	}

	//Transactions:
	//	"TRANS" transaction+=TransactionStatement+;
	public TransactionsElements getTransactionsAccess() {
		return (pTransactions != null) ? pTransactions : (pTransactions = new TransactionsElements());
	}
	
	public ParserRule getTransactionsRule() {
		return getTransactionsAccess().getRule();
	}

	//TransactionStatement:
	//	precondition=TransactionPrecondition "->" postTransaction=PostTransaction;
	public TransactionStatementElements getTransactionStatementAccess() {
		return (pTransactionStatement != null) ? pTransactionStatement : (pTransactionStatement = new TransactionStatementElements());
	}
	
	public ParserRule getTransactionStatementRule() {
		return getTransactionStatementAccess().getRule();
	}

	//TransactionPrecondition:
	//	preconditions+=PreconditionStatement (logicalOperator+=AND_OR preconditions+=PreconditionStatement)*;
	public TransactionPreconditionElements getTransactionPreconditionAccess() {
		return (pTransactionPrecondition != null) ? pTransactionPrecondition : (pTransactionPrecondition = new TransactionPreconditionElements());
	}
	
	public ParserRule getTransactionPreconditionRule() {
		return getTransactionPreconditionAccess().getRule();
	}

	//PreconditionStatement:
	//	IntegerPrecondition | BooleanPrecondition | StatePrecondition | Comment;
	public PreconditionStatementElements getPreconditionStatementAccess() {
		return (pPreconditionStatement != null) ? pPreconditionStatement : (pPreconditionStatement = new PreconditionStatementElements());
	}
	
	public ParserRule getPreconditionStatementRule() {
		return getPreconditionStatementAccess().getRule();
	}

	//StatePrecondition:
	//	var=[StateVariableDeclaration] "=" value=ID;
	public StatePreconditionElements getStatePreconditionAccess() {
		return (pStatePrecondition != null) ? pStatePrecondition : (pStatePrecondition = new StatePreconditionElements());
	}
	
	public ParserRule getStatePreconditionRule() {
		return getStatePreconditionAccess().getRule();
	}

	//BooleanPrecondition:
	//	var=[BooleanDeclarion] "=" value=BOOL;
	public BooleanPreconditionElements getBooleanPreconditionAccess() {
		return (pBooleanPrecondition != null) ? pBooleanPrecondition : (pBooleanPrecondition = new BooleanPreconditionElements());
	}
	
	public ParserRule getBooleanPreconditionRule() {
		return getBooleanPreconditionAccess().getRule();
	}

	//IntegerPrecondition:
	//	var=[IntegerDeclarion] "=" value=INT;
	public IntegerPreconditionElements getIntegerPreconditionAccess() {
		return (pIntegerPrecondition != null) ? pIntegerPrecondition : (pIntegerPrecondition = new IntegerPreconditionElements());
	}
	
	public ParserRule getIntegerPreconditionRule() {
		return getIntegerPreconditionAccess().getRule();
	}

	//PostTransaction:
	//	postTransactions+=PostTransactionStatement (logicalOperator+=AND_OR postTransactions+=PostTransactionStatement)*;
	public PostTransactionElements getPostTransactionAccess() {
		return (pPostTransaction != null) ? pPostTransaction : (pPostTransaction = new PostTransactionElements());
	}
	
	public ParserRule getPostTransactionRule() {
		return getPostTransactionAccess().getRule();
	}

	//PostTransactionStatement:
	//	ConditionalPostTRansaction | //| Comment
	// SimplePostTransaction;
	public PostTransactionStatementElements getPostTransactionStatementAccess() {
		return (pPostTransactionStatement != null) ? pPostTransactionStatement : (pPostTransactionStatement = new PostTransactionStatementElements());
	}
	
	public ParserRule getPostTransactionStatementRule() {
		return getPostTransactionStatementAccess().getRule();
	}

	//SimplePostTransaction:
	//	IntegerPostTransaction | BooleanPostTransaction | //| Comment 
	// StatePostTransaction;
	public SimplePostTransactionElements getSimplePostTransactionAccess() {
		return (pSimplePostTransaction != null) ? pSimplePostTransaction : (pSimplePostTransaction = new SimplePostTransactionElements());
	}
	
	public ParserRule getSimplePostTransactionRule() {
		return getSimplePostTransactionAccess().getRule();
	}

	//StatePostTransaction:
	//	"next" "(" var=[StateVariableDeclaration] ")" "=" value=ID;
	public StatePostTransactionElements getStatePostTransactionAccess() {
		return (pStatePostTransaction != null) ? pStatePostTransaction : (pStatePostTransaction = new StatePostTransactionElements());
	}
	
	public ParserRule getStatePostTransactionRule() {
		return getStatePostTransactionAccess().getRule();
	}

	//BooleanPostTransaction:
	//	"next" "(" var=[BooleanDeclarion] ")" "=" value=BOOL;
	public BooleanPostTransactionElements getBooleanPostTransactionAccess() {
		return (pBooleanPostTransaction != null) ? pBooleanPostTransaction : (pBooleanPostTransaction = new BooleanPostTransactionElements());
	}
	
	public ParserRule getBooleanPostTransactionRule() {
		return getBooleanPostTransactionAccess().getRule();
	}

	//IntegerPostTransaction:
	//	"next" "(" var=[IntegerDeclarion] ")" "=" value=INT;
	public IntegerPostTransactionElements getIntegerPostTransactionAccess() {
		return (pIntegerPostTransaction != null) ? pIntegerPostTransaction : (pIntegerPostTransaction = new IntegerPostTransactionElements());
	}
	
	public ParserRule getIntegerPostTransactionRule() {
		return getIntegerPostTransactionAccess().getRule();
	}

	//ConditionalPostTRansaction:
	//	name=ID;
	public ConditionalPostTRansactionElements getConditionalPostTRansactionAccess() {
		return (pConditionalPostTRansaction != null) ? pConditionalPostTRansaction : (pConditionalPostTRansaction = new ConditionalPostTRansactionElements());
	}
	
	public ParserRule getConditionalPostTRansactionRule() {
		return getConditionalPostTRansactionAccess().getRule();
	}

	//VariableDeclaration:
	//	IntegerDeclarion | BooleanDeclarion | StateVariableDeclaration | Comment;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//IntegerDeclarion:
	//	name=ID ":" "integer" ";";
	public IntegerDeclarionElements getIntegerDeclarionAccess() {
		return (pIntegerDeclarion != null) ? pIntegerDeclarion : (pIntegerDeclarion = new IntegerDeclarionElements());
	}
	
	public ParserRule getIntegerDeclarionRule() {
		return getIntegerDeclarionAccess().getRule();
	}

	//BooleanDeclarion:
	//	name=ID ":" "boolean" ";";
	public BooleanDeclarionElements getBooleanDeclarionAccess() {
		return (pBooleanDeclarion != null) ? pBooleanDeclarion : (pBooleanDeclarion = new BooleanDeclarionElements());
	}
	
	public ParserRule getBooleanDeclarionRule() {
		return getBooleanDeclarionAccess().getRule();
	}

	//StateVariableDeclaration:
	//	name=ID ":" "{" states+=ID ("," states+=ID)* "}" ";";
	public StateVariableDeclarationElements getStateVariableDeclarationAccess() {
		return (pStateVariableDeclaration != null) ? pStateVariableDeclaration : (pStateVariableDeclaration = new StateVariableDeclarationElements());
	}
	
	public ParserRule getStateVariableDeclarationRule() {
		return getStateVariableDeclarationAccess().getRule();
	}

	////VarType: 
	// //	'boolean' | 'integer'
	// //;
	//AssignmentExpression:
	//	IntegerAssignment | BooleanAssignment | StateAssignment | Comment;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return (pAssignmentExpression != null) ? pAssignmentExpression : (pAssignmentExpression = new AssignmentExpressionElements());
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//BooleanAssignment:
	//	"init" "(" var=[BooleanDeclarion] ")" ":=" value=BOOL ";";
	public BooleanAssignmentElements getBooleanAssignmentAccess() {
		return (pBooleanAssignment != null) ? pBooleanAssignment : (pBooleanAssignment = new BooleanAssignmentElements());
	}
	
	public ParserRule getBooleanAssignmentRule() {
		return getBooleanAssignmentAccess().getRule();
	}

	//BOOL:
	//	"True" | "False";
	public BOOLElements getBOOLAccess() {
		return (pBOOL != null) ? pBOOL : (pBOOL = new BOOLElements());
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//IntegerAssignment:
	//	"init" "(" var=[IntegerDeclarion] ")" ":=" value=INT ";";
	public IntegerAssignmentElements getIntegerAssignmentAccess() {
		return (pIntegerAssignment != null) ? pIntegerAssignment : (pIntegerAssignment = new IntegerAssignmentElements());
	}
	
	public ParserRule getIntegerAssignmentRule() {
		return getIntegerAssignmentAccess().getRule();
	}

	////
	//StateAssignment:
	//	"init" "(" var=[StateVariableDeclaration] ")" ":=" value=ID ";";
	public StateAssignmentElements getStateAssignmentAccess() {
		return (pStateAssignment != null) ? pStateAssignment : (pStateAssignment = new StateAssignmentElements());
	}
	
	public ParserRule getStateAssignmentRule() {
		return getStateAssignmentAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

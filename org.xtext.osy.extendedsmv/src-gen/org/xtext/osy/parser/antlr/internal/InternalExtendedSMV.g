/*
* generated by Xtext
*/
grammar InternalExtendedSMV;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.osy.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.osy.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.osy.services.ExtendedSMVGrammarAccess;

}

@parser::members {

 	private ExtendedSMVGrammarAccess grammarAccess;
 	
    public InternalExtendedSMVParser(TokenStream input, ExtendedSMVGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ExtendedSMVGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSectionsSectionParserRuleCall_0()); 
	    }
		lv_sections_0_0=ruleSection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"sections",
        		lv_sections_0_0, 
        		"Section");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleSection
entryRuleSection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSectionRule()); }
	 iv_ruleSection=ruleSection 
	 { $current=$iv_ruleSection.current; } 
	 EOF 
;

// Rule Section
ruleSection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSectionAccess().getVariablesSectionParserRuleCall_0()); 
    }
    this_VariablesSection_0=ruleVariablesSection
    { 
        $current = $this_VariablesSection_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSectionAccess().getAssignmentsParserRuleCall_1()); 
    }
    this_Assignments_1=ruleAssignments
    { 
        $current = $this_Assignments_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSectionAccess().getTransactionsParserRuleCall_2()); 
    }
    this_Transactions_2=ruleTransactions
    { 
        $current = $this_Transactions_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current; } 
	 EOF 
;

// Rule Comment
ruleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_comment_0_0=RULE_SMV_COMMENT
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getCommentAccess().getCommentSMV_COMMENTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"SMV_COMMENT");
	    }

)
)
;





// Entry rule entryRuleVariablesSection
entryRuleVariablesSection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariablesSectionRule()); }
	 iv_ruleVariablesSection=ruleVariablesSection 
	 { $current=$iv_ruleVariablesSection.current; } 
	 EOF 
;

// Rule VariablesSection
ruleVariablesSection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariablesSectionAccess().getVARKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariablesSectionAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); 
	    }
		lv_variables_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariablesSectionRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_1_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleAssignments
entryRuleAssignments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentsRule()); }
	 iv_ruleAssignments=ruleAssignments 
	 { $current=$iv_ruleAssignments.current; } 
	 EOF 
;

// Rule Assignments
ruleAssignments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAssignmentsAccess().getAssignmentsAction_0(),
            $current);
    }
)	otherlv_1='ASSIGN' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentsAccess().getASSIGNKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentsAccess().getAssignmentsAssignmentExpressionParserRuleCall_2_0()); 
	    }
		lv_assignments_2_0=ruleAssignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentsRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_2_0, 
        		"AssignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTransactions
entryRuleTransactions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransactionsRule()); }
	 iv_ruleTransactions=ruleTransactions 
	 { $current=$iv_ruleTransactions.current; } 
	 EOF 
;

// Rule Transactions
ruleTransactions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TRANS' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransactionsAccess().getTRANSKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionsAccess().getTransactionTransactionStatementParserRuleCall_1_0()); 
	    }
		lv_transaction_1_0=ruleTransactionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionsRule());
	        }
       		add(
       			$current, 
       			"transaction",
        		lv_transaction_1_0, 
        		"TransactionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTransactionStatement
entryRuleTransactionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransactionStatementRule()); }
	 iv_ruleTransactionStatement=ruleTransactionStatement 
	 { $current=$iv_ruleTransactionStatement.current; } 
	 EOF 
;

// Rule TransactionStatement
ruleTransactionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionStatementAccess().getPreconditionTransactionPreconditionParserRuleCall_0_0()); 
	    }
		lv_precondition_0_0=ruleTransactionPrecondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionStatementRule());
	        }
       		set(
       			$current, 
       			"precondition",
        		lv_precondition_0_0, 
        		"TransactionPrecondition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransactionStatementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionStatementAccess().getPostTransactionPostTransactionParserRuleCall_2_0()); 
	    }
		lv_postTransaction_2_0=rulePostTransaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionStatementRule());
	        }
       		set(
       			$current, 
       			"postTransaction",
        		lv_postTransaction_2_0, 
        		"PostTransaction");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTransactionPrecondition
entryRuleTransactionPrecondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransactionPreconditionRule()); }
	 iv_ruleTransactionPrecondition=ruleTransactionPrecondition 
	 { $current=$iv_ruleTransactionPrecondition.current; } 
	 EOF 
;

// Rule TransactionPrecondition
ruleTransactionPrecondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionPreconditionAccess().getPreconditionsPreconditionStatementParserRuleCall_0_0()); 
	    }
		lv_preconditions_0_0=rulePreconditionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionPreconditionRule());
	        }
       		add(
       			$current, 
       			"preconditions",
        		lv_preconditions_0_0, 
        		"PreconditionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_logicalOperator_1_0=RULE_AND_OR
		{
			newLeafNode(lv_logicalOperator_1_0, grammarAccess.getTransactionPreconditionAccess().getLogicalOperatorAND_ORTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionPreconditionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"logicalOperator",
        		lv_logicalOperator_1_0, 
        		"AND_OR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionPreconditionAccess().getPreconditionsPreconditionStatementParserRuleCall_1_1_0()); 
	    }
		lv_preconditions_2_0=rulePreconditionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionPreconditionRule());
	        }
       		add(
       			$current, 
       			"preconditions",
        		lv_preconditions_2_0, 
        		"PreconditionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePreconditionStatement
entryRulePreconditionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreconditionStatementRule()); }
	 iv_rulePreconditionStatement=rulePreconditionStatement 
	 { $current=$iv_rulePreconditionStatement.current; } 
	 EOF 
;

// Rule PreconditionStatement
rulePreconditionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPreconditionStatementAccess().getIntegerPreconditionParserRuleCall_0()); 
    }
    this_IntegerPrecondition_0=ruleIntegerPrecondition
    { 
        $current = $this_IntegerPrecondition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPreconditionStatementAccess().getBooleanPreconditionParserRuleCall_1()); 
    }
    this_BooleanPrecondition_1=ruleBooleanPrecondition
    { 
        $current = $this_BooleanPrecondition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPreconditionStatementAccess().getStatePreconditionParserRuleCall_2()); 
    }
    this_StatePrecondition_2=ruleStatePrecondition
    { 
        $current = $this_StatePrecondition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPreconditionStatementAccess().getCommentParserRuleCall_3()); 
    }
    this_Comment_3=ruleComment
    { 
        $current = $this_Comment_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatePrecondition
entryRuleStatePrecondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatePreconditionRule()); }
	 iv_ruleStatePrecondition=ruleStatePrecondition 
	 { $current=$iv_ruleStatePrecondition.current; } 
	 EOF 
;

// Rule StatePrecondition
ruleStatePrecondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatePreconditionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getStatePreconditionAccess().getVarStateVariableDeclarationCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatePreconditionAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_ID
		{
			newLeafNode(lv_value_2_0, grammarAccess.getStatePreconditionAccess().getValueIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatePreconditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleBooleanPrecondition
entryRuleBooleanPrecondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanPreconditionRule()); }
	 iv_ruleBooleanPrecondition=ruleBooleanPrecondition 
	 { $current=$iv_ruleBooleanPrecondition.current; } 
	 EOF 
;

// Rule BooleanPrecondition
ruleBooleanPrecondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanPreconditionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getBooleanPreconditionAccess().getVarBooleanDeclarionCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanPreconditionAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanPreconditionAccess().getValueBOOLParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanPreconditionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerPrecondition
entryRuleIntegerPrecondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerPreconditionRule()); }
	 iv_ruleIntegerPrecondition=ruleIntegerPrecondition 
	 { $current=$iv_ruleIntegerPrecondition.current; } 
	 EOF 
;

// Rule IntegerPrecondition
ruleIntegerPrecondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerPreconditionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getIntegerPreconditionAccess().getVarIntegerDeclarionCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerPreconditionAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getIntegerPreconditionAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerPreconditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRulePostTransaction
entryRulePostTransaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostTransactionRule()); }
	 iv_rulePostTransaction=rulePostTransaction 
	 { $current=$iv_rulePostTransaction.current; } 
	 EOF 
;

// Rule PostTransaction
rulePostTransaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPostTransactionAccess().getPostTransactionsPostTransactionStatementParserRuleCall_0_0()); 
	    }
		lv_postTransactions_0_0=rulePostTransactionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostTransactionRule());
	        }
       		add(
       			$current, 
       			"postTransactions",
        		lv_postTransactions_0_0, 
        		"PostTransactionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_logicalOperator_1_0=RULE_AND_OR
		{
			newLeafNode(lv_logicalOperator_1_0, grammarAccess.getPostTransactionAccess().getLogicalOperatorAND_ORTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostTransactionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"logicalOperator",
        		lv_logicalOperator_1_0, 
        		"AND_OR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostTransactionAccess().getPostTransactionsPostTransactionStatementParserRuleCall_1_1_0()); 
	    }
		lv_postTransactions_2_0=rulePostTransactionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostTransactionRule());
	        }
       		add(
       			$current, 
       			"postTransactions",
        		lv_postTransactions_2_0, 
        		"PostTransactionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePostTransactionStatement
entryRulePostTransactionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostTransactionStatementRule()); }
	 iv_rulePostTransactionStatement=rulePostTransactionStatement 
	 { $current=$iv_rulePostTransactionStatement.current; } 
	 EOF 
;

// Rule PostTransactionStatement
rulePostTransactionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPostTransactionStatementAccess().getConditionalPostTRansactionParserRuleCall_0()); 
    }
    this_ConditionalPostTRansaction_0=ruleConditionalPostTRansaction
    { 
        $current = $this_ConditionalPostTRansaction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPostTransactionStatementAccess().getSimplePostTransactionParserRuleCall_1()); 
    }
    this_SimplePostTransaction_1=ruleSimplePostTransaction
    { 
        $current = $this_SimplePostTransaction_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimplePostTransaction
entryRuleSimplePostTransaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimplePostTransactionRule()); }
	 iv_ruleSimplePostTransaction=ruleSimplePostTransaction 
	 { $current=$iv_ruleSimplePostTransaction.current; } 
	 EOF 
;

// Rule SimplePostTransaction
ruleSimplePostTransaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimplePostTransactionAccess().getIntegerPostTransactionParserRuleCall_0()); 
    }
    this_IntegerPostTransaction_0=ruleIntegerPostTransaction
    { 
        $current = $this_IntegerPostTransaction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimplePostTransactionAccess().getBooleanPostTransactionParserRuleCall_1()); 
    }
    this_BooleanPostTransaction_1=ruleBooleanPostTransaction
    { 
        $current = $this_BooleanPostTransaction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimplePostTransactionAccess().getStatePostTransactionParserRuleCall_2()); 
    }
    this_StatePostTransaction_2=ruleStatePostTransaction
    { 
        $current = $this_StatePostTransaction_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatePostTransaction
entryRuleStatePostTransaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatePostTransactionRule()); }
	 iv_ruleStatePostTransaction=ruleStatePostTransaction 
	 { $current=$iv_ruleStatePostTransaction.current; } 
	 EOF 
;

// Rule StatePostTransaction
ruleStatePostTransaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='next' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatePostTransactionAccess().getNextKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatePostTransactionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatePostTransactionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getStatePostTransactionAccess().getVarStateVariableDeclarationCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatePostTransactionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatePostTransactionAccess().getEqualsSignKeyword_4());
    }
(
(
		lv_value_5_0=RULE_ID
		{
			newLeafNode(lv_value_5_0, grammarAccess.getStatePostTransactionAccess().getValueIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatePostTransactionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleBooleanPostTransaction
entryRuleBooleanPostTransaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanPostTransactionRule()); }
	 iv_ruleBooleanPostTransaction=ruleBooleanPostTransaction 
	 { $current=$iv_ruleBooleanPostTransaction.current; } 
	 EOF 
;

// Rule BooleanPostTransaction
ruleBooleanPostTransaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='next' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBooleanPostTransactionAccess().getNextKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanPostTransactionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanPostTransactionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getBooleanPostTransactionAccess().getVarBooleanDeclarionCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBooleanPostTransactionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBooleanPostTransactionAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanPostTransactionAccess().getValueBOOLParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanPostTransactionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerPostTransaction
entryRuleIntegerPostTransaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerPostTransactionRule()); }
	 iv_ruleIntegerPostTransaction=ruleIntegerPostTransaction 
	 { $current=$iv_ruleIntegerPostTransaction.current; } 
	 EOF 
;

// Rule IntegerPostTransaction
ruleIntegerPostTransaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='next' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntegerPostTransactionAccess().getNextKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerPostTransactionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerPostTransactionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getIntegerPostTransactionAccess().getVarIntegerDeclarionCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIntegerPostTransactionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIntegerPostTransactionAccess().getEqualsSignKeyword_4());
    }
(
(
		lv_value_5_0=RULE_INT
		{
			newLeafNode(lv_value_5_0, grammarAccess.getIntegerPostTransactionAccess().getValueINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerPostTransactionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleConditionalPostTRansaction
entryRuleConditionalPostTRansaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalPostTRansactionRule()); }
	 iv_ruleConditionalPostTRansaction=ruleConditionalPostTRansaction 
	 { $current=$iv_ruleConditionalPostTRansaction.current; } 
	 EOF 
;

// Rule ConditionalPostTRansaction
ruleConditionalPostTRansaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getConditionalPostTRansactionAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalPostTRansactionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getIntegerDeclarionParserRuleCall_0()); 
    }
    this_IntegerDeclarion_0=ruleIntegerDeclarion
    { 
        $current = $this_IntegerDeclarion_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getBooleanDeclarionParserRuleCall_1()); 
    }
    this_BooleanDeclarion_1=ruleBooleanDeclarion
    { 
        $current = $this_BooleanDeclarion_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getStateVariableDeclarationParserRuleCall_2()); 
    }
    this_StateVariableDeclaration_2=ruleStateVariableDeclaration
    { 
        $current = $this_StateVariableDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getCommentParserRuleCall_3()); 
    }
    this_Comment_3=ruleComment
    { 
        $current = $this_Comment_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerDeclarion
entryRuleIntegerDeclarion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerDeclarionRule()); }
	 iv_ruleIntegerDeclarion=ruleIntegerDeclarion 
	 { $current=$iv_ruleIntegerDeclarion.current; } 
	 EOF 
;

// Rule IntegerDeclarion
ruleIntegerDeclarion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getIntegerDeclarionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerDeclarionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerDeclarionAccess().getColonKeyword_1());
    }
	otherlv_2='integer' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntegerDeclarionAccess().getIntegerKeyword_2());
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIntegerDeclarionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleBooleanDeclarion
entryRuleBooleanDeclarion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanDeclarionRule()); }
	 iv_ruleBooleanDeclarion=ruleBooleanDeclarion 
	 { $current=$iv_ruleBooleanDeclarion.current; } 
	 EOF 
;

// Rule BooleanDeclarion
ruleBooleanDeclarion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBooleanDeclarionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanDeclarionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanDeclarionAccess().getColonKeyword_1());
    }
	otherlv_2='boolean' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanDeclarionAccess().getBooleanKeyword_2());
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBooleanDeclarionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleStateVariableDeclaration
entryRuleStateVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateVariableDeclarationRule()); }
	 iv_ruleStateVariableDeclaration=ruleStateVariableDeclaration 
	 { $current=$iv_ruleStateVariableDeclaration.current; } 
	 EOF 
;

// Rule StateVariableDeclaration
ruleStateVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStateVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateVariableDeclarationAccess().getColonKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateVariableDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		lv_states_3_0=RULE_ID
		{
			newLeafNode(lv_states_3_0, grammarAccess.getStateVariableDeclarationAccess().getStatesIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateVariableDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateVariableDeclarationAccess().getCommaKeyword_4_0());
    }
(
(
		lv_states_5_0=RULE_ID
		{
			newLeafNode(lv_states_5_0, grammarAccess.getStateVariableDeclarationAccess().getStatesIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateVariableDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"states",
        		lv_states_5_0, 
        		"ID");
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStateVariableDeclarationAccess().getRightCurlyBracketKeyword_5());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStateVariableDeclarationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getIntegerAssignmentParserRuleCall_0()); 
    }
    this_IntegerAssignment_0=ruleIntegerAssignment
    { 
        $current = $this_IntegerAssignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getBooleanAssignmentParserRuleCall_1()); 
    }
    this_BooleanAssignment_1=ruleBooleanAssignment
    { 
        $current = $this_BooleanAssignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getStateAssignmentParserRuleCall_2()); 
    }
    this_StateAssignment_2=ruleStateAssignment
    { 
        $current = $this_StateAssignment_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getCommentParserRuleCall_3()); 
    }
    this_Comment_3=ruleComment
    { 
        $current = $this_Comment_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanAssignment
entryRuleBooleanAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanAssignmentRule()); }
	 iv_ruleBooleanAssignment=ruleBooleanAssignment 
	 { $current=$iv_ruleBooleanAssignment.current; } 
	 EOF 
;

// Rule BooleanAssignment
ruleBooleanAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='init' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBooleanAssignmentAccess().getInitKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanAssignmentAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanAssignmentRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getBooleanAssignmentAccess().getVarBooleanDeclarionCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBooleanAssignmentAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBooleanAssignmentAccess().getColonEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanAssignmentAccess().getValueBOOLParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBooleanAssignmentAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleBOOL
entryRuleBOOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLRule()); } 
	 iv_ruleBOOL=ruleBOOL 
	 { $current=$iv_ruleBOOL.current.getText(); }  
	 EOF 
;

// Rule BOOL
ruleBOOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='True' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getTrueKeyword_0()); 
    }

    |
	kw='False' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleIntegerAssignment
entryRuleIntegerAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerAssignmentRule()); }
	 iv_ruleIntegerAssignment=ruleIntegerAssignment 
	 { $current=$iv_ruleIntegerAssignment.current; } 
	 EOF 
;

// Rule IntegerAssignment
ruleIntegerAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='init' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntegerAssignmentAccess().getInitKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerAssignmentAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerAssignmentRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getIntegerAssignmentAccess().getVarIntegerDeclarionCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIntegerAssignmentAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIntegerAssignmentAccess().getColonEqualsSignKeyword_4());
    }
(
(
		lv_value_5_0=RULE_INT
		{
			newLeafNode(lv_value_5_0, grammarAccess.getIntegerAssignmentAccess().getValueINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"INT");
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIntegerAssignmentAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleStateAssignment
entryRuleStateAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateAssignmentRule()); }
	 iv_ruleStateAssignment=ruleStateAssignment 
	 { $current=$iv_ruleStateAssignment.current; } 
	 EOF 
;

// Rule StateAssignment
ruleStateAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='init' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateAssignmentAccess().getInitKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateAssignmentAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateAssignmentRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getStateAssignmentAccess().getVarStateVariableDeclarationCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateAssignmentAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateAssignmentAccess().getColonEqualsSignKeyword_4());
    }
(
(
		lv_value_5_0=RULE_ID
		{
			newLeafNode(lv_value_5_0, grammarAccess.getStateAssignmentAccess().getValueIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"ID");
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStateAssignmentAccess().getSemicolonKeyword_6());
    }
)
;





RULE_SMV_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_AND_OR : ('&'|'|');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



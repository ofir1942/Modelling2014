grammar org.xtext.osy.ExtendedSMV with org.eclipse.xtext.common.Terminals

generate extendedSMV "http://www.xtext.org/osy/ExtendedSMV"



Model:
	(modules += Module)*
;
	


Module:
	'MODULE' name=ID
	// @YE: the params' expression is included in parentheses with question mark,
	// because parameter list may be empty like in this example: Module A()  
	//('(' ((params += IDENTIFIER) (',' params += IDENTIFIER)*)? ')')?
	(sections += Section)+
;

Section:
	Assignments | VariablesSection | LTLSpecification //| Transactions | LTLSpecification //| Comments
;

VariablesSection: //@SM: possible sequence VAR -> ASSIGN -> VAR - no need to actually declare anything 
	'VAR'
	(variables += VariableDeclaration)+
;

VariableDeclaration:
	BooleanDeclarion | StateVariableDeclaration//|IntegerDeclarion |  | StateVariableDeclaration | Comment
;
//
//IntegerDeclarion:
//	name=ID ':' 'integer' ';'
//;

BooleanDeclarion:
	name=ID ':' 'boolean' ';'
;

StateVariableDeclaration:
	name=ID ':' possibleStates=StateList ';'
;

StateList:
	'{' states += ID (',' states += ID )* '}'
;
//
//Comment: 
//	comment = SMV_COMMENT
//;
//

Assignments:
	'ASSIGN'
	(assignments += AssignmentExpression)+
;
//
AssignmentExpression:
  InitAssign
  | NextAssign
;
//
InitAssign:
	BooleanInit | StateInit
;

NextAssign:
	'next' '(' varName = [StateVariableDeclaration] ')' ':=' nextStatement = CaseAssign
;

CaseAssign:
	'case' 
	(caseLiterals += CaseLiteral)+
	'esac' ';'
;

CaseLiteral:
	condition=CaseCondition ':' nextValue=CaseNextLiteral ';'
;

CaseNextLiteral:
	SingleState | StateList  
;

SingleState:
	state = ID
;

CaseCondition:
	BooleanVar | DefaultCondition
;

DefaultCondition:
	val = 'TRUE'
;

BooleanVar:
	booleanVar = [BooleanDeclarion]
;

//BooleanConstant:
//	val=BOOLEAN_CONSTANT
//;
//
//terminal BOOLEAN_CONSTANT:
//	( 'TRUE' | 'FALSE' )
//;

BooleanInit:
	'init' '(' varName=[BooleanDeclarion] ')' ':=' value = ( 'TRUE' | 'FALSE' )  ';'
;

StateInit:
	'init' '(' (varName = [StateVariableDeclaration]) ')' ':=' value=ID ';'
;

LTLSpecification:
	'LTLSPEC' expression = LTLExpression 
;

LTLExpression: 
	'G' expression=ID
;


//terminal fragment DIGIT:
//	('0'..'9')
//;
//
//terminal IDENTIFIER:
//	//IDENTIFIER_FIRST_CHARACTER | Identifier IdentifierConsecutiveCharacter
//	(('a' .. 'z') |( 'A' .. 'Z') | '_') (('a' .. 'z') | ('A' .. 'Z') | '_' | DIGIT | '$' | '#' | '-')* 
//;

//terminal SMV_COMMENT 	: '--' !('\n'|'\r')* ('\r'? '\n')?;

grammar org.xtext.osy.ExtendedSMV with org.eclipse.xtext.common.Terminals

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

generate extendedSMV "http://www.xtext.org/osy/ExtendedSMV"

Model:
	(modules += Module)*
;

Module:
	'MODULE' name=IDENTIFIER
	// @YE: the params' expression is included in parentheses with question mark,
	// because parameter list may be empty like in this example: Module A()  
	('(' ((params += Parameter) (',' params += Parameter)*)? ')')?
	(sections += Section)*
;

Parameter:
	name = IDENTIFIER
;

terminal IDENTIFIER:
	//IDENTIFIER_FIRST_CHARACTER | Identifier IdentifierConsecutiveCharacter
	(('a' .. 'z') |( 'A' .. 'Z') | '_') (('a' .. 'z') | ('A' .. 'Z') | '_' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' |'9' | '$' | '#' | '-')* 
;

terminal SL_COMMENT : '--' !('\n'|'\r')* ('\r'? '\n')? ;

Section:
	VariableDeclaration | Assignments | DefineDeclaration | Constraints
	| LTLSpecification | CTLSpecification | PatternsDefinitions
;

PatternsDefinitions:
	'PATTERNS'
	(macros += MacroDeclaration)+
;

MacroDeclaration:
//	name=ID '(' var1=ID ',' var2=ID ')' ':' macroPattern = STRING  '=>'  macroInterpretation = STRING  ';'
	MacroDeclaration_1_var  | 
	MacroDeclaration_2_vars | 
	MacroDeclaration_3_vars 
; 

MacroDeclaration_1_var:
	name=IDENTIFIER '(' var1=IDENTIFIER  ')' ':' macroPattern = PATTERN  '=>'  macroInterpretation = PATTERN  ';'
;

MacroDeclaration_2_vars:
	name=IDENTIFIER '(' var1=IDENTIFIER ',' var2=IDENTIFIER ')' ':' macroPattern = PATTERN  '=>'  macroInterpretation = PATTERN  ';'
;

MacroDeclaration_3_vars:
	name=IDENTIFIER '(' var1=IDENTIFIER ',' var2=IDENTIFIER ',' var3=IDENTIFIER ')' ':' macroPattern = PATTERN  '=>'  macroInterpretation = PATTERN  ';'
;

VariableDeclaration:
  {VariableDeclaration}
  'VAR' (variables+=DeclaredVariable)*
;

DeclaredVariable returns Variable:
  name=IDENTIFIER ':' type=Type semicolon?=';'?
;

Type: 
  SimpleTypeSpecifier
  | ModuleTypeSpecifier 
;

SimpleTypeSpecifier:
	{BooleanType} 'boolean'
	| {WordType} ('word' '[' wordINT=INT ']') 
	| {UnsignedWordType} ('unsigned' 'word' '[' uWordINT=INT ']')
	| {SignedWordType} ('signed word' '[' signedINT=INT ']')
	| {EnumType} '{' literals+=EmunLiteral (',' literals+=EmunLiteral)* '}'
	| {IntervalType} lower=INT '..' upper=INT
	| {ArrayType} 'array' lower=INT '..' upper=INT 'of' type=SimpleTypeSpecifier
;

ModuleTypeSpecifier:
  {SyncrProcessType} module=[Module|IDENTIFIER] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?
  | {AsyncrProcessType} "process" module=[Module|IDENTIFIER] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?
;

EmunLiteral:
	EnumVariable
	| IntegerConstant
	| BooleanConstant
;

EnumVariable:  
  name=IDENTIFIER
;

IntegerConstant returns Expression:
  {IntegerConstant} constant=INT
;

DefineDeclaration:
  {DefineDeclaration}
  'DEFINE' (definitions+=Definition)*
;

Constraints:  
  feature=BasicOpConstraints expression=SimpleExpression semicolon?=';'?
;

BasicOpConstraints:
  'INIT'|'INVAR'|'TRANS'|'FAIRNESS'|'JUSTICE';

SimpleExpression returns Expression: 
	BasicExpression
;

SetBodyExpression returns Expression:
  {SetBodyExpression}
  '{' expressions+=SimpleExpression (',' expressions+=SimpleExpression)* '}'
  //'{' expressions+=IDENTIFIER (',' expressions+=IDENTIFIER)* '}'
;


	
Assignments:
	{Assignments}
	'ASSIGN'
	(assignments += AssignmentExpression)*
;

AssignmentExpression:
  SimpleAssign
  | InitAssign
  | NextAssign
;

SimpleAssign:
  id=ComplexIdentifier ':=' expression=SimpleExpression semicolon?=';'?
;

InitAssign:
  'init' '(' id+=IDENTIFIER ('.' id+=IDENTIFIER)*  ')' ':=' expression=SimpleExpression semicolon?=';'?
;

NextAssign:
  'next' '(' id+=IDENTIFIER ('.' id+=IDENTIFIER)* ')' ':=' expression=NextExpression semicolon?=';'?
;

NextExpression returns Expression:
  SimpleExpression
;

BOOL:
	'TRUE' | 'FALSE'
;
	

BasicExpression returns Expression:
  Implies;


Implies returns Expression:
  Equivalence ({BinaryExpression.left=current} feature=OpImplies right=Equivalence)*; // TODO: operator precedence
  
OpImplies:
 '->';


Equivalence returns Expression:
  IfThenElse ({BinaryExpression.left=current} feature=OpEquivalence right=IfThenElse)*;
  
OpEquivalence:
 '<->';
  
IfThenElse returns Expression:
  Or ({IfThenElse.left=current}'?' then=Or ':' else=Or)? //TODO: not sure if OR!!!!!! maybe unaryEX
;
  
Or returns Expression:
  And ({BinaryExpression.left=current} feature=OpOr right=And)*;

OpOr:
  'xnor' | '|' | 'xor';

And returns Expression:
  BasicRelational ({BinaryExpression.left=current} feature=OpAnd right=BasicRelational)*;
  
OpAnd:
  '&';
 
BasicRelational returns Expression:
  BasicIn ({BinaryExpression.left=current} feature=BasicOpRelational right=BasicIn)*;

BasicOpRelational:
  '=' | '!=' | '<' | '>' | '<=' | '>=';

BasicIn returns Expression:
  BasicUnion ({BinaryExpression.left=current} feature=BasicOpIn right=BasicUnion)*;

BasicOpIn:
 'in';
  
BasicUnion returns Expression:
  BasicShift ({BinaryExpression.left=current} feature=BasicOpUnion right=BasicShift)*;

BasicOpUnion:
 'union';

BasicShift returns Expression:
  BasicAddSub ({BinaryExpression.left=current} feature=BasicOpShift right=BasicAddSub)*;  

BasicOpShift:
  '<<'|'>>';

BasicAddSub returns Expression:
  BasicRemainder ({BinaryExpression.left=current} feature=BasicOpAddSub right=BasicRemainder)*;  

BasicOpAddSub:
  '+'|'-';

BasicRemainder returns Expression:
  UnaryMinusExpression ({BinaryExpression.left=current} feature=BasicOpRemainder right=UnaryMinusExpression)*;
  
BasicOpRemainder:
  'mod' | '*' | '/';  

UnaryMinusExpression returns Expression:
	BasicWordConcatenation | {UnaryMinusExpression} feature=BasicMinusOpUnary expression=UnaryMinusExpression
;

BasicMinusOpUnary:
	'-'
;

BasicWordConcatenation returns Expression:
   UnaryExclamationExpression ({BinaryExpression.left=current} feature=BasicOpWordConcatenation right=UnaryExclamationExpression)*;

BasicOpWordConcatenation:
  '::';
  
UnaryExclamationExpression returns Expression:
	UnaryExpression | {UnaryExclamationExpression} feature=BasicExclamationOpUnary expression=UnaryExclamationExpression
;

BasicExclamationOpUnary:
	'!'
;

UnaryExpression returns Expression:
	SimpleExpressionParenthesis | Case | BooleanConstant | SetBodyExpression | EnumIdentifier
	| Next | {Keywords} ('self' | 'running') 
;

Next returns Expression:
  {Next}
  'next' '(' expression=SimpleExpression ')'
;  

SimpleExpressionParenthesis returns Expression:
  '(' Implies {SimpleExpressionParenthesis.expression=current} ')'
;


EnumIdentifier:
	name += GeneralIdentifier ('.' name += GeneralIdentifier)*
;

GeneralIdentifier:
	INT | IDENTIFIER 
;


BooleanConstant returns Expression: 
  {BooleanConstant} 
  (isTrue?='TRUE'|'FALSE')
;

Case returns Expression:
  {Case}
  'case'
    (caseBodies+=CaseBody)+
  'esac'
;

CaseBody returns Expression:
  {CaseBody}
  case = SimpleExpression ':' assigment=SimpleExpression ';'
;

//Specs:

LTLSpecification:
	'LTLSPEC' ((expression=LTLExpression ('&' patterns+=PATTERN)*) | (patterns+=PATTERN)+) ';'?
;

CTLSpecification:
	'CTLSPEC' ((expression=CTLExpression ('&' patterns+=PATTERN)*) | (patterns+=PATTERN)+) ';'?
;

CTLExpression returns Expression:
	SpecImplies 
;

LTLExpression returns Expression: 
	SpecImplies 
;

SpecImplies returns Expression:
  SpecEquivalence ({BinaryExpression.left=current} feature=OpImplies right=SpecEquivalence)*
;
  
SpecEquivalence returns Expression:
  SpecOr ({BinaryExpression.left=current} feature=OpEquivalence right=SpecOr)*
;  
  
SpecOr returns Expression:
  SpecAnd ({BinaryExpression.left=current} feature=OpOr right=SpecAnd)*
;


SpecAnd returns Expression:
  Triggered ({BinaryExpression.left=current} feature=OpAnd right=Triggered)*;
  
Triggered returns Expression:
  Since ({BinaryExpression.left=current} feature=OpTriggered right=Since)*;
  
OpTriggered:
  'T';

Since returns Expression:
  Releases ({BinaryExpression.left=current} feature=OpSince right=Releases)*;
  
OpSince:
  'S';


Releases returns Expression:
  Until ({BinaryExpression.left=current} feature=OpReleases right=Until)*;

OpReleases:
  'V';


Until returns Expression:
  SpecUnaryExpression ({BinaryExpression.left=current} feature=OpUntil right=SpecUnaryExpression)*;
  
OpUntil:
  'U';
  
SpecUnaryExpression returns Expression:
	ExistsUntil | ForallUntil | 
	{UnaryExpression} feature=OpSpecUnaryExpression expression=SpecUnaryExpression |
	Primary 
;

OpSpecUnaryExpression:
	'!' // Shared by Basic, LTL, CTL
	|'X'|'G'|'F'|'Y'|'Z'|'H'|'O' // LTL
	|'EG'|'EX'|'EF'|'AG'|'AX'|'AF' // CTL  	
;

  
ExistsUntil returns Expression:
  {ExistsUntil}
  'E' '[' expression=SimpleExpression ']';
    
ForallUntil returns Expression:
  {ForallUntil}
  'A' '[' expression=SimpleExpression ']';

  
  
Primary returns Expression:
  Parenthesis
  | EnumAssignment
  | EnumIdentifier
;

terminal PATTERN:
	 '"' -> '"'
;


EnumAssignment:
	var += IDENTIFIER ('.' var+= IDENTIFIER)* '=' var2 = (IDENTIFIER | BOOL)
;

Parenthesis returns Expression:
  '(' SpecImplies {Parenthesis.expression=current} ')'
;

ComplexIdentifier returns Expression:
  ComplexIdentifierPrimary ({BinaryExpression.left=current} '.' right=ComplexIdentifierPrimary)*;
  
ComplexIdentifierPrimary returns Expression:  
  {VariableIdentifier} var=[Variable|IDENTIFIER] ('[' expression=SimpleExpression ']')?  
  | {PredefinedVariable} feature=('self'|'running')
;

Definition returns Variable:
  name=IDENTIFIER ':=' assignment=SimpleExpression semicolon?=';'?
;

/**
 * generated by Xtext
 */
package org.xtext.osy.generator;

import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.osy.extendedSMV.Assignments;
import org.xtext.osy.extendedSMV.BooleanDeclarion;
import org.xtext.osy.extendedSMV.BooleanInit;
import org.xtext.osy.extendedSMV.BooleanVar;
import org.xtext.osy.extendedSMV.LTLExpression;
import org.xtext.osy.extendedSMV.LTLSpecification;
import org.xtext.osy.extendedSMV.Module;
import org.xtext.osy.extendedSMV.Section;
import org.xtext.osy.extendedSMV.SingleState;
import org.xtext.osy.extendedSMV.StateInit;
import org.xtext.osy.extendedSMV.StateList;
import org.xtext.osy.extendedSMV.StateVariableDeclaration;
import org.xtext.osy.extendedSMV.VariablesSection;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class ExtendedSMVGenerator implements IGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Module> _filter = Iterables.<Module>filter(_iterable, Module.class);
    for (final Module e : _filter) {
      {
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(e);
        String _string = _fullyQualifiedName.toString("/");
        String filePath = (_string + ".smv");
        String _compile = this.compile(e);
        fsa.generateFile(filePath, _compile);
      }
    }
  }
  
  public String compile(final Module m) {
    String _name = m.getName();
    String _plus = ("MODULE " + _name);
    String code = (_plus + "\n");
    EList<Section> _sections = m.getSections();
    for (final Section s : _sections) {
      if ((s instanceof Assignments)) {
        String _CompileAssignments = this.CompileAssignments(((Assignments)s));
        String _plus_1 = (code + _CompileAssignments);
        code = _plus_1;
      } else {
        if ((s instanceof VariablesSection)) {
          String _CompileVariables = this.CompileVariables(((VariablesSection)s));
          String _plus_2 = (code + _CompileVariables);
          code = _plus_2;
        } else {
          if ((s instanceof LTLSpecification)) {
            String _CompileLTLSpec = this.CompileLTLSpec(((LTLSpecification)s));
            String _plus_3 = (code + _CompileLTLSpec);
            code = _plus_3;
          } else {
            code = (code + "Somethingelse1+\n");
          }
        }
      }
    }
    return code;
  }
  
  public String CompileLTLSpec(final LTLSpecification specification) {
    LTLExpression _expression = specification.getExpression();
    String _expression_1 = _expression.getExpression();
    String _plus = ("LTLSPEC G " + _expression_1);
    return (_plus + "\n");
  }
  
  public String CompileAssignments(final Assignments assignments) {
    ICompositeNode _node = NodeModelUtils.getNode(assignments);
    String code = NodeModelUtils.getTokenText(_node);
    String _replace = code.replace("ASSIGN", "ASSIGN\n");
    code = _replace;
    String _replace_1 = code.replace(";", ";\n");
    code = _replace_1;
    return code;
  }
  
  public String StateListString(final StateList list) {
    EList<String> _states = list.getStates();
    String states = IterableExtensions.join(_states, ",");
    return (("{" + states) + "}");
  }
  
  public String SingleStateName(final SingleState singleState) {
    return singleState.getState();
  }
  
  public String BoolVarName(final BooleanVar boolVar) {
    BooleanDeclarion _booleanVar = boolVar.getBooleanVar();
    return _booleanVar.getName();
  }
  
  public String CompileStateInitAssignment(final StateInit stateInit) {
    StateVariableDeclaration _varName = stateInit.getVarName();
    String _name = _varName.getName();
    String _plus = ("\tinit(" + _name);
    String _plus_1 = (_plus + ") := ");
    String _value = stateInit.getValue();
    String _plus_2 = (_plus_1 + _value);
    return (_plus_2 + ";\n");
  }
  
  public String CompileBoolInitAssignment(final BooleanInit boolInit) {
    BooleanDeclarion _varName = boolInit.getVarName();
    String _name = _varName.getName();
    String _plus = ("\tinit( " + _name);
    String _plus_1 = (_plus + ") := ");
    String _value = boolInit.getValue();
    String _plus_2 = (_plus_1 + _value);
    return (_plus_2 + ";\n");
  }
  
  public String CompileVariables(final VariablesSection varsSection) {
    ICompositeNode _node = NodeModelUtils.getNode(varsSection);
    String code = NodeModelUtils.getTokenText(_node);
    String _replace = code.replace("VAR", "VAR\n");
    code = _replace;
    String _replace_1 = code.replace(";", ";\n");
    code = _replace_1;
    return code;
  }
  
  public String CompileStateVarDeclaration(final StateVariableDeclaration stateVarDeclaration) {
    StateList _possibleStates = stateVarDeclaration.getPossibleStates();
    EList<String> _states = _possibleStates.getStates();
    String states = IterableExtensions.join(_states, ",");
    String _name = stateVarDeclaration.getName();
    String _plus = ("\t" + _name);
    String _plus_1 = (_plus + ":");
    String _plus_2 = (_plus_1 + "{");
    String _plus_3 = (_plus_2 + states);
    return (_plus_3 + "} ;");
  }
  
  public CharSequence compile(final Section s) {
    StringConcatenation _builder = new StringConcatenation();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(s);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(" h");
    _builder.newLineIfNotEmpty();
    _builder.append("//\t");
    return _builder;
  }
}

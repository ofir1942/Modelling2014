/*
* generated by Xtext
*/
package org.xtext.osy.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.osy.services.ExtendedSMVGrammarAccess;

public class ExtendedSMVParser extends AbstractContentAssistParser {
	
	@Inject
	private ExtendedSMVGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.osy.ui.contentassist.antlr.internal.InternalExtendedSMVParser createParser() {
		org.xtext.osy.ui.contentassist.antlr.internal.InternalExtendedSMVParser result = new org.xtext.osy.ui.contentassist.antlr.internal.InternalExtendedSMVParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSectionAccess().getAlternatives(), "rule__Section__Alternatives");
					put(grammarAccess.getPreconditionStatementAccess().getAlternatives(), "rule__PreconditionStatement__Alternatives");
					put(grammarAccess.getPostTransactionStatementAccess().getAlternatives(), "rule__PostTransactionStatement__Alternatives");
					put(grammarAccess.getSimplePostTransactionAccess().getAlternatives(), "rule__SimplePostTransaction__Alternatives");
					put(grammarAccess.getVariableDeclarationAccess().getAlternatives(), "rule__VariableDeclaration__Alternatives");
					put(grammarAccess.getAssignmentExpressionAccess().getAlternatives(), "rule__AssignmentExpression__Alternatives");
					put(grammarAccess.getBOOLAccess().getAlternatives(), "rule__BOOL__Alternatives");
					put(grammarAccess.getVariablesSectionAccess().getGroup(), "rule__VariablesSection__Group__0");
					put(grammarAccess.getAssignmentsAccess().getGroup(), "rule__Assignments__Group__0");
					put(grammarAccess.getTransactionsAccess().getGroup(), "rule__Transactions__Group__0");
					put(grammarAccess.getTransactionStatementAccess().getGroup(), "rule__TransactionStatement__Group__0");
					put(grammarAccess.getTransactionPreconditionAccess().getGroup(), "rule__TransactionPrecondition__Group__0");
					put(grammarAccess.getTransactionPreconditionAccess().getGroup_1(), "rule__TransactionPrecondition__Group_1__0");
					put(grammarAccess.getStatePreconditionAccess().getGroup(), "rule__StatePrecondition__Group__0");
					put(grammarAccess.getBooleanPreconditionAccess().getGroup(), "rule__BooleanPrecondition__Group__0");
					put(grammarAccess.getIntegerPreconditionAccess().getGroup(), "rule__IntegerPrecondition__Group__0");
					put(grammarAccess.getPostTransactionAccess().getGroup(), "rule__PostTransaction__Group__0");
					put(grammarAccess.getPostTransactionAccess().getGroup_1(), "rule__PostTransaction__Group_1__0");
					put(grammarAccess.getStatePostTransactionAccess().getGroup(), "rule__StatePostTransaction__Group__0");
					put(grammarAccess.getBooleanPostTransactionAccess().getGroup(), "rule__BooleanPostTransaction__Group__0");
					put(grammarAccess.getIntegerPostTransactionAccess().getGroup(), "rule__IntegerPostTransaction__Group__0");
					put(grammarAccess.getIntegerDeclarionAccess().getGroup(), "rule__IntegerDeclarion__Group__0");
					put(grammarAccess.getBooleanDeclarionAccess().getGroup(), "rule__BooleanDeclarion__Group__0");
					put(grammarAccess.getStateVariableDeclarationAccess().getGroup(), "rule__StateVariableDeclaration__Group__0");
					put(grammarAccess.getStateVariableDeclarationAccess().getGroup_4(), "rule__StateVariableDeclaration__Group_4__0");
					put(grammarAccess.getBooleanAssignmentAccess().getGroup(), "rule__BooleanAssignment__Group__0");
					put(grammarAccess.getIntegerAssignmentAccess().getGroup(), "rule__IntegerAssignment__Group__0");
					put(grammarAccess.getStateAssignmentAccess().getGroup(), "rule__StateAssignment__Group__0");
					put(grammarAccess.getModelAccess().getSectionsAssignment(), "rule__Model__SectionsAssignment");
					put(grammarAccess.getCommentAccess().getCommentAssignment(), "rule__Comment__CommentAssignment");
					put(grammarAccess.getVariablesSectionAccess().getVariablesAssignment_1(), "rule__VariablesSection__VariablesAssignment_1");
					put(grammarAccess.getAssignmentsAccess().getAssignmentsAssignment_2(), "rule__Assignments__AssignmentsAssignment_2");
					put(grammarAccess.getTransactionsAccess().getTransactionAssignment_1(), "rule__Transactions__TransactionAssignment_1");
					put(grammarAccess.getTransactionStatementAccess().getPreconditionAssignment_0(), "rule__TransactionStatement__PreconditionAssignment_0");
					put(grammarAccess.getTransactionStatementAccess().getPostTransactionAssignment_2(), "rule__TransactionStatement__PostTransactionAssignment_2");
					put(grammarAccess.getTransactionPreconditionAccess().getPreconditionsAssignment_0(), "rule__TransactionPrecondition__PreconditionsAssignment_0");
					put(grammarAccess.getTransactionPreconditionAccess().getLogicalOperatorAssignment_1_0(), "rule__TransactionPrecondition__LogicalOperatorAssignment_1_0");
					put(grammarAccess.getTransactionPreconditionAccess().getPreconditionsAssignment_1_1(), "rule__TransactionPrecondition__PreconditionsAssignment_1_1");
					put(grammarAccess.getStatePreconditionAccess().getVarAssignment_0(), "rule__StatePrecondition__VarAssignment_0");
					put(grammarAccess.getStatePreconditionAccess().getValueAssignment_2(), "rule__StatePrecondition__ValueAssignment_2");
					put(grammarAccess.getBooleanPreconditionAccess().getVarAssignment_0(), "rule__BooleanPrecondition__VarAssignment_0");
					put(grammarAccess.getBooleanPreconditionAccess().getValueAssignment_2(), "rule__BooleanPrecondition__ValueAssignment_2");
					put(grammarAccess.getIntegerPreconditionAccess().getVarAssignment_0(), "rule__IntegerPrecondition__VarAssignment_0");
					put(grammarAccess.getIntegerPreconditionAccess().getValueAssignment_2(), "rule__IntegerPrecondition__ValueAssignment_2");
					put(grammarAccess.getPostTransactionAccess().getPostTransactionsAssignment_0(), "rule__PostTransaction__PostTransactionsAssignment_0");
					put(grammarAccess.getPostTransactionAccess().getLogicalOperatorAssignment_1_0(), "rule__PostTransaction__LogicalOperatorAssignment_1_0");
					put(grammarAccess.getPostTransactionAccess().getPostTransactionsAssignment_1_1(), "rule__PostTransaction__PostTransactionsAssignment_1_1");
					put(grammarAccess.getStatePostTransactionAccess().getVarAssignment_2(), "rule__StatePostTransaction__VarAssignment_2");
					put(grammarAccess.getStatePostTransactionAccess().getValueAssignment_5(), "rule__StatePostTransaction__ValueAssignment_5");
					put(grammarAccess.getBooleanPostTransactionAccess().getVarAssignment_2(), "rule__BooleanPostTransaction__VarAssignment_2");
					put(grammarAccess.getBooleanPostTransactionAccess().getValueAssignment_5(), "rule__BooleanPostTransaction__ValueAssignment_5");
					put(grammarAccess.getIntegerPostTransactionAccess().getVarAssignment_2(), "rule__IntegerPostTransaction__VarAssignment_2");
					put(grammarAccess.getIntegerPostTransactionAccess().getValueAssignment_5(), "rule__IntegerPostTransaction__ValueAssignment_5");
					put(grammarAccess.getConditionalPostTRansactionAccess().getNameAssignment(), "rule__ConditionalPostTRansaction__NameAssignment");
					put(grammarAccess.getIntegerDeclarionAccess().getNameAssignment_0(), "rule__IntegerDeclarion__NameAssignment_0");
					put(grammarAccess.getBooleanDeclarionAccess().getNameAssignment_0(), "rule__BooleanDeclarion__NameAssignment_0");
					put(grammarAccess.getStateVariableDeclarationAccess().getNameAssignment_0(), "rule__StateVariableDeclaration__NameAssignment_0");
					put(grammarAccess.getStateVariableDeclarationAccess().getStatesAssignment_3(), "rule__StateVariableDeclaration__StatesAssignment_3");
					put(grammarAccess.getStateVariableDeclarationAccess().getStatesAssignment_4_1(), "rule__StateVariableDeclaration__StatesAssignment_4_1");
					put(grammarAccess.getBooleanAssignmentAccess().getVarAssignment_2(), "rule__BooleanAssignment__VarAssignment_2");
					put(grammarAccess.getBooleanAssignmentAccess().getValueAssignment_5(), "rule__BooleanAssignment__ValueAssignment_5");
					put(grammarAccess.getIntegerAssignmentAccess().getVarAssignment_2(), "rule__IntegerAssignment__VarAssignment_2");
					put(grammarAccess.getIntegerAssignmentAccess().getValueAssignment_5(), "rule__IntegerAssignment__ValueAssignment_5");
					put(grammarAccess.getStateAssignmentAccess().getVarAssignment_2(), "rule__StateAssignment__VarAssignment_2");
					put(grammarAccess.getStateAssignmentAccess().getValueAssignment_5(), "rule__StateAssignment__ValueAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.osy.ui.contentassist.antlr.internal.InternalExtendedSMVParser typedParser = (org.xtext.osy.ui.contentassist.antlr.internal.InternalExtendedSMVParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExtendedSMVGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExtendedSMVGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
